/* tslint:disable */
/* eslint-disable */
/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { LiveStream } from '../models';
// @ts-ignore
import { LiveStreamCreationPayload } from '../models';
// @ts-ignore
import { LiveStreamListResponse } from '../models';
// @ts-ignore
import { LiveStreamThumbnailUploadPayload } from '../models';
// @ts-ignore
import { LiveStreamUpdatePayload } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { RestreamsRequestObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LiveStreamsApi - axios parameter creator
 * @export
 */
export const LiveStreamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a livestream object.
         * @summary Create live stream
         * @param {LiveStreamCreationPayload} liveStreamCreationPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLivestreamObject: async (liveStreamCreationPayload: LiveStreamCreationPayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveStreamCreationPayload' is not null or undefined
            assertParamExists('createLivestreamObject', 'liveStreamCreationPayload', liveStreamCreationPayload)
            const localVarPath = `/live-streams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveStreamCreationPayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live-streams',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveStreamCreationPayload, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If you do not need a live stream any longer, you can send a request to delete it. All you need is the liveStreamId.
         * @summary Delete a live stream
         * @param {string} liveStreamId The unique ID for the live stream that you want to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLivestream: async (liveStreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveStreamId' is not null or undefined
            assertParamExists('deleteLivestream', 'liveStreamId', liveStreamId)
            const localVarPath = `/live-streams/{liveStreamId}`
                .replace(`{${"liveStreamId"}}`, encodeURIComponent(String(liveStreamId !== undefined ? liveStreamId : `-liveStreamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live-streams/{liveStreamId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send the unique identifier for a live stream to delete its thumbnail.
         * @summary Delete a thumbnail
         * @param {string} liveStreamId The unique identifier of the live stream whose thumbnail you want to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnail: async (liveStreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveStreamId' is not null or undefined
            assertParamExists('deleteThumbnail', 'liveStreamId', liveStreamId)
            const localVarPath = `/live-streams/{liveStreamId}/thumbnail`
                .replace(`{${"liveStreamId"}}`, encodeURIComponent(String(liveStreamId !== undefined ? liveStreamId : `-liveStreamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live-streams/{liveStreamId}/thumbnail',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a livestream by id.
         * @summary Retrieve live stream
         * @param {string} liveStreamId The unique ID for the live stream you want to watch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLivestreamById: async (liveStreamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveStreamId' is not null or undefined
            assertParamExists('getLivestreamById', 'liveStreamId', liveStreamId)
            const localVarPath = `/live-streams/{liveStreamId}`
                .replace(`{${"liveStreamId"}}`, encodeURIComponent(String(liveStreamId !== undefined ? liveStreamId : `-liveStreamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live-streams/{liveStreamId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of livestreams on the workspace.
         * @summary List all live streams
         * @param {string} [streamKey] The unique stream key that allows you to stream videos.
         * @param {string} [name] You can filter live streams by their name or a part of their name.
         * @param {'name' | 'createdAt' | 'updatedAt'} [sortBy] Enables you to sort live stream results. Allowed attributes: &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;. &#x60;name&#x60; - the name of the live stream. &#x60;createdAt&#x60; - the time a live stream was created. &#x60;updatedAt&#x60; - the time a live stream was last updated.  When using &#x60;createdAt&#x60; or &#x60;updatedAt&#x60;, the API sorts the results based on the ISO-8601 time format. 
         * @param {'asc' | 'desc'} [sortOrder] Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.
         * @param {number} [currentPage] Choose the number of search results to return per page. Minimum value: 1
         * @param {number} [pageSize] Results per page. Allowed values 1-100, default is 25.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (streamKey?: string, name?: string, sortBy?: 'name' | 'createdAt' | 'updatedAt', sortOrder?: 'asc' | 'desc', currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/live-streams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (streamKey !== undefined) {
                localVarQueryParameter['streamKey'] = streamKey;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['currentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live-streams',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the livestream object.
         * @summary Update a live stream
         * @param {string} liveStreamId The unique ID for the live stream that you want to update information for such as player details.
         * @param {LiveStreamUpdatePayload} liveStreamUpdatePayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLivestreamObject: async (liveStreamId: string, liveStreamUpdatePayload: LiveStreamUpdatePayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveStreamId' is not null or undefined
            assertParamExists('updateLivestreamObject', 'liveStreamId', liveStreamId)
            // verify required parameter 'liveStreamUpdatePayload' is not null or undefined
            assertParamExists('updateLivestreamObject', 'liveStreamUpdatePayload', liveStreamUpdatePayload)
            const localVarPath = `/live-streams/{liveStreamId}`
                .replace(`{${"liveStreamId"}}`, encodeURIComponent(String(liveStreamId !== undefined ? liveStreamId : `-liveStreamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liveStreamUpdatePayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live-streams/{liveStreamId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liveStreamUpdatePayload, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload the thumbnail for the livestream.
         * @summary Upload a thumbnail
         * @param {string} liveStreamId The unique ID for the live stream you want to upload.
         * @param {Uint8Array | File | buffer.File} file The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.
         * @param {LiveStreamThumbnailUploadPayload} liveStreamThumbnailUploadPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadThumbnail: async (liveStreamId: string, file: Uint8Array | File | buffer.File, liveStreamThumbnailUploadPayload: LiveStreamThumbnailUploadPayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveStreamId' is not null or undefined
            assertParamExists('uploadThumbnail', 'liveStreamId', liveStreamId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadThumbnail', 'file', file)
            // verify required parameter 'liveStreamThumbnailUploadPayload' is not null or undefined
            assertParamExists('uploadThumbnail', 'liveStreamThumbnailUploadPayload', liveStreamThumbnailUploadPayload)
            const localVarPath = `/live-streams/{liveStreamId}/thumbnail`
                .replace(`{${"liveStreamId"}}`, encodeURIComponent(String(liveStreamId !== undefined ? liveStreamId : `-liveStreamId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: liveStreamThumbnailUploadPayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live-streams/{liveStreamId}/thumbnail',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiveStreamsApi - functional programming interface
 * @export
 */
export const LiveStreamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveStreamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a livestream object.
         * @summary Create live stream
         * @param {LiveStreamsApiCreateLivestreamObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLivestreamObject(requestParameters: LiveStreamsApiCreateLivestreamObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveStream>> {
            const liveStreamCreationPayload: LiveStreamCreationPayload = {
                name: requestParameters.name,
                public: requestParameters.public,
                playerId: requestParameters.playerId,
                restreams: requestParameters.restreams
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLivestreamObject(liveStreamCreationPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * If you do not need a live stream any longer, you can send a request to delete it. All you need is the liveStreamId.
         * @summary Delete a live stream
         * @param {LiveStreamsApiDeleteLivestreamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLivestream(requestParameters: LiveStreamsApiDeleteLivestreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLivestream(requestParameters.liveStreamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send the unique identifier for a live stream to delete its thumbnail.
         * @summary Delete a thumbnail
         * @param {LiveStreamsApiDeleteThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteThumbnail(requestParameters: LiveStreamsApiDeleteThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteThumbnail(requestParameters.liveStreamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a livestream by id.
         * @summary Retrieve live stream
         * @param {LiveStreamsApiGetLivestreamByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLivestreamById(requestParameters: LiveStreamsApiGetLivestreamByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLivestreamById(requestParameters.liveStreamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of livestreams on the workspace.
         * @summary List all live streams
         * @param {LiveStreamsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: LiveStreamsApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveStreamListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.streamKey, requestParameters.name, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.currentPage, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the livestream object.
         * @summary Update a live stream
         * @param {LiveStreamsApiUpdateLivestreamObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLivestreamObject(requestParameters: LiveStreamsApiUpdateLivestreamObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveStream>> {
            const liveStreamUpdatePayload: LiveStreamUpdatePayload = {
                name: requestParameters.name,
                public: requestParameters.public,
                playerId: requestParameters.playerId,
                restreams: requestParameters.restreams
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLivestreamObject(requestParameters.liveStreamId, liveStreamUpdatePayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload the thumbnail for the livestream.
         * @summary Upload a thumbnail
         * @param {LiveStreamsApiUploadThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadThumbnail(requestParameters: LiveStreamsApiUploadThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveStream>> {
            const liveStreamThumbnailUploadPayload: LiveStreamThumbnailUploadPayload = {
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadThumbnail(requestParameters.liveStreamId, requestParameters.file, liveStreamThumbnailUploadPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LiveStreamsApi - factory interface
 * @export
 */
export const LiveStreamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiveStreamsApiFp(configuration)
    return {
        /**
         * Creates a livestream object.
         * @summary Create live stream
         * @param {LiveStreamsApiCreateLivestreamObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLivestreamObject(requestParameters: LiveStreamsApiCreateLivestreamObjectRequest, options?: AxiosRequestConfig): AxiosPromise<LiveStream> {
            return localVarFp.createLivestreamObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * If you do not need a live stream any longer, you can send a request to delete it. All you need is the liveStreamId.
         * @summary Delete a live stream
         * @param {LiveStreamsApiDeleteLivestreamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLivestream(requestParameters: LiveStreamsApiDeleteLivestreamRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLivestream(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Send the unique identifier for a live stream to delete its thumbnail.
         * @summary Delete a thumbnail
         * @param {LiveStreamsApiDeleteThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnail(requestParameters: LiveStreamsApiDeleteThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<LiveStream> {
            return localVarFp.deleteThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a livestream by id.
         * @summary Retrieve live stream
         * @param {LiveStreamsApiGetLivestreamByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLivestreamById(requestParameters: LiveStreamsApiGetLivestreamByIdRequest, options?: AxiosRequestConfig): AxiosPromise<LiveStream> {
            return localVarFp.getLivestreamById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of livestreams on the workspace.
         * @summary List all live streams
         * @param {LiveStreamsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: LiveStreamsApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LiveStreamListResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the livestream object.
         * @summary Update a live stream
         * @param {LiveStreamsApiUpdateLivestreamObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLivestreamObject(requestParameters: LiveStreamsApiUpdateLivestreamObjectRequest, options?: AxiosRequestConfig): AxiosPromise<LiveStream> {
            return localVarFp.updateLivestreamObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload the thumbnail for the livestream.
         * @summary Upload a thumbnail
         * @param {LiveStreamsApiUploadThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadThumbnail(requestParameters: LiveStreamsApiUploadThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<LiveStream> {
            return localVarFp.uploadThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLivestreamObject operation in LiveStreamsApi.
 * @export
 * @interface LiveStreamsApiCreateLivestreamObjectRequest
 */
export type LiveStreamsApiCreateLivestreamObjectRequest = {
    
} & LiveStreamCreationPayload

/**
 * Request parameters for deleteLivestream operation in LiveStreamsApi.
 * @export
 * @interface LiveStreamsApiDeleteLivestreamRequest
 */
export type LiveStreamsApiDeleteLivestreamRequest = {
    
    /**
    * The unique ID for the live stream that you want to remove.
    * @type {string}
    * @memberof LiveStreamsApiDeleteLivestream
    */
    readonly liveStreamId: string
    
}

/**
 * Request parameters for deleteThumbnail operation in LiveStreamsApi.
 * @export
 * @interface LiveStreamsApiDeleteThumbnailRequest
 */
export type LiveStreamsApiDeleteThumbnailRequest = {
    
    /**
    * The unique identifier of the live stream whose thumbnail you want to delete.
    * @type {string}
    * @memberof LiveStreamsApiDeleteThumbnail
    */
    readonly liveStreamId: string
    
}

/**
 * Request parameters for getLivestreamById operation in LiveStreamsApi.
 * @export
 * @interface LiveStreamsApiGetLivestreamByIdRequest
 */
export type LiveStreamsApiGetLivestreamByIdRequest = {
    
    /**
    * The unique ID for the live stream you want to watch.
    * @type {string}
    * @memberof LiveStreamsApiGetLivestreamById
    */
    readonly liveStreamId: string
    
}

/**
 * Request parameters for listAll operation in LiveStreamsApi.
 * @export
 * @interface LiveStreamsApiListAllRequest
 */
export type LiveStreamsApiListAllRequest = {
    
    /**
    * The unique stream key that allows you to stream videos.
    * @type {string}
    * @memberof LiveStreamsApiListAll
    */
    readonly streamKey?: string
    
    /**
    * You can filter live streams by their name or a part of their name.
    * @type {string}
    * @memberof LiveStreamsApiListAll
    */
    readonly name?: string
    
    /**
    * Enables you to sort live stream results. Allowed attributes: `name`, `createdAt`, `updatedAt`. `name` - the name of the live stream. `createdAt` - the time a live stream was created. `updatedAt` - the time a live stream was last updated.  When using `createdAt` or `updatedAt`, the API sorts the results based on the ISO-8601 time format. 
    * @type {'name' | 'createdAt' | 'updatedAt'}
    * @memberof LiveStreamsApiListAll
    */
    readonly sortBy?: 'name' | 'createdAt' | 'updatedAt'
    
    /**
    * Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.
    * @type {'asc' | 'desc'}
    * @memberof LiveStreamsApiListAll
    */
    readonly sortOrder?: 'asc' | 'desc'
    
    /**
    * Choose the number of search results to return per page. Minimum value: 1
    * @type {number}
    * @memberof LiveStreamsApiListAll
    */
    readonly currentPage?: number
    
    /**
    * Results per page. Allowed values 1-100, default is 25.
    * @type {number}
    * @memberof LiveStreamsApiListAll
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for updateLivestreamObject operation in LiveStreamsApi.
 * @export
 * @interface LiveStreamsApiUpdateLivestreamObjectRequest
 */
export type LiveStreamsApiUpdateLivestreamObjectRequest = {
    
    /**
    * The unique ID for the live stream that you want to update information for such as player details.
    * @type {string}
    * @memberof LiveStreamsApiUpdateLivestreamObject
    */
    readonly liveStreamId: string
    
} & LiveStreamUpdatePayload

/**
 * Request parameters for uploadThumbnail operation in LiveStreamsApi.
 * @export
 * @interface LiveStreamsApiUploadThumbnailRequest
 */
export type LiveStreamsApiUploadThumbnailRequest = {
    
    /**
    * The unique ID for the live stream you want to upload.
    * @type {string}
    * @memberof LiveStreamsApiUploadThumbnail
    */
    readonly liveStreamId: string
    
    /**
    * The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.
    * @type {Uint8Array | File | buffer.File}
    * @memberof LiveStreamsApiUploadThumbnail
    */
    readonly file: Uint8Array | File | buffer.File
    
} & LiveStreamThumbnailUploadPayload

/**
 * LiveStreamsApiGenerated - object-oriented interface
 * @export
 * @class LiveStreamsApiGenerated
 * @extends {BaseAPI}
 */
export class LiveStreamsApiGenerated extends BaseAPI {
    /**
     * Creates a livestream object.
     * @summary Create live stream
     * @param {LiveStreamsApiCreateLivestreamObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveStreamsApiGenerated
     */
    public createLivestreamObject(requestParameters: LiveStreamsApiCreateLivestreamObjectRequest, options?: AxiosRequestConfig) {
        return LiveStreamsApiFp(this.configuration).createLivestreamObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * If you do not need a live stream any longer, you can send a request to delete it. All you need is the liveStreamId.
     * @summary Delete a live stream
     * @param {LiveStreamsApiDeleteLivestreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveStreamsApiGenerated
     */
    public deleteLivestream(requestParameters: LiveStreamsApiDeleteLivestreamRequest, options?: AxiosRequestConfig) {
        return LiveStreamsApiFp(this.configuration).deleteLivestream(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send the unique identifier for a live stream to delete its thumbnail.
     * @summary Delete a thumbnail
     * @param {LiveStreamsApiDeleteThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveStreamsApiGenerated
     */
    public deleteThumbnail(requestParameters: LiveStreamsApiDeleteThumbnailRequest, options?: AxiosRequestConfig) {
        return LiveStreamsApiFp(this.configuration).deleteThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a livestream by id.
     * @summary Retrieve live stream
     * @param {LiveStreamsApiGetLivestreamByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveStreamsApiGenerated
     */
    public getLivestreamById(requestParameters: LiveStreamsApiGetLivestreamByIdRequest, options?: AxiosRequestConfig) {
        return LiveStreamsApiFp(this.configuration).getLivestreamById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of livestreams on the workspace.
     * @summary List all live streams
     * @param {LiveStreamsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveStreamsApiGenerated
     */
    public listAll(requestParameters: LiveStreamsApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return LiveStreamsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the livestream object.
     * @summary Update a live stream
     * @param {LiveStreamsApiUpdateLivestreamObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveStreamsApiGenerated
     */
    public updateLivestreamObject(requestParameters: LiveStreamsApiUpdateLivestreamObjectRequest, options?: AxiosRequestConfig) {
        return LiveStreamsApiFp(this.configuration).updateLivestreamObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload the thumbnail for the livestream.
     * @summary Upload a thumbnail
     * @param {LiveStreamsApiUploadThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveStreamsApiGenerated
     */
    public uploadThumbnail(requestParameters: LiveStreamsApiUploadThumbnailRequest, options?: AxiosRequestConfig) {
        return LiveStreamsApiFp(this.configuration).uploadThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
