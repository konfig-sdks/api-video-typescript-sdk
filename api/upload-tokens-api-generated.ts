/* tslint:disable */
/* eslint-disable */
/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { TokenCreationPayload } from '../models';
// @ts-ignore
import { TokenListResponse } from '../models';
// @ts-ignore
import { UploadToken } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UploadTokensApi - axios parameter creator
 * @export
 */
export const UploadTokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
         * @summary Delete an upload token
         * @param {string} uploadToken The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToken: async (uploadToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadToken' is not null or undefined
            assertParamExists('deleteToken', 'uploadToken', uploadToken)
            const localVarPath = `/upload-tokens/{uploadToken}`
                .replace(`{${"uploadToken"}}`, encodeURIComponent(String(uploadToken !== undefined ? uploadToken : `-uploadToken-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/upload-tokens/{uploadToken}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates an upload token that can be used to replace the API Key. More information can be found [here](https://docs.api.video/vod/delegated-upload-tokens)
         * @summary Generate an upload token
         * @param {TokenCreationPayload} tokenCreationPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateToken: async (tokenCreationPayload: TokenCreationPayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenCreationPayload' is not null or undefined
            assertParamExists('generateToken', 'tokenCreationPayload', tokenCreationPayload)
            const localVarPath = `/upload-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tokenCreationPayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/upload-tokens',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tokenCreationPayload, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details about a specific upload token by id.
         * @summary Retrieve upload token
         * @param {string} uploadToken The unique identifier for the token you want information about.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (uploadToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadToken' is not null or undefined
            assertParamExists('getDetails', 'uploadToken', uploadToken)
            const localVarPath = `/upload-tokens/{uploadToken}`
                .replace(`{${"uploadToken"}}`, encodeURIComponent(String(uploadToken !== undefined ? uploadToken : `-uploadToken-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/upload-tokens/{uploadToken}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all currently active delegated tokens.
         * @summary List all active upload tokens
         * @param {'createdAt' | 'ttl'} [sortBy] Allowed: createdAt, ttl. You can use these to sort by when a token was created, or how much longer the token will be active (ttl - time to live). Date and time is presented in ISO-8601 format.
         * @param {'asc' | 'desc'} [sortOrder] Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0 or Z-A.
         * @param {number} [currentPage] Choose the number of search results to return per page. Minimum value: 1
         * @param {number} [pageSize] Results per page. Allowed values 1-100, default is 25.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveDelegatedTokens: async (sortBy?: 'createdAt' | 'ttl', sortOrder?: 'asc' | 'desc', currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/upload-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['currentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/upload-tokens',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadTokensApi - functional programming interface
 * @export
 */
export const UploadTokensApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadTokensApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
         * @summary Delete an upload token
         * @param {UploadTokensApiDeleteTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteToken(requestParameters: UploadTokensApiDeleteTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteToken(requestParameters.uploadToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generates an upload token that can be used to replace the API Key. More information can be found [here](https://docs.api.video/vod/delegated-upload-tokens)
         * @summary Generate an upload token
         * @param {UploadTokensApiGenerateTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateToken(requestParameters: UploadTokensApiGenerateTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadToken>> {
            const tokenCreationPayload: TokenCreationPayload = {
                ttl: requestParameters.ttl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateToken(tokenCreationPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve details about a specific upload token by id.
         * @summary Retrieve upload token
         * @param {UploadTokensApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: UploadTokensApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.uploadToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of all currently active delegated tokens.
         * @summary List all active upload tokens
         * @param {UploadTokensApiListActiveDelegatedTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActiveDelegatedTokens(requestParameters: UploadTokensApiListActiveDelegatedTokensRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActiveDelegatedTokens(requestParameters.sortBy, requestParameters.sortOrder, requestParameters.currentPage, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UploadTokensApi - factory interface
 * @export
 */
export const UploadTokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadTokensApiFp(configuration)
    return {
        /**
         * Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
         * @summary Delete an upload token
         * @param {UploadTokensApiDeleteTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToken(requestParameters: UploadTokensApiDeleteTokenRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates an upload token that can be used to replace the API Key. More information can be found [here](https://docs.api.video/vod/delegated-upload-tokens)
         * @summary Generate an upload token
         * @param {UploadTokensApiGenerateTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateToken(requestParameters: UploadTokensApiGenerateTokenRequest, options?: AxiosRequestConfig): AxiosPromise<UploadToken> {
            return localVarFp.generateToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details about a specific upload token by id.
         * @summary Retrieve upload token
         * @param {UploadTokensApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: UploadTokensApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<UploadToken> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all currently active delegated tokens.
         * @summary List all active upload tokens
         * @param {UploadTokensApiListActiveDelegatedTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveDelegatedTokens(requestParameters: UploadTokensApiListActiveDelegatedTokensRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TokenListResponse> {
            return localVarFp.listActiveDelegatedTokens(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteToken operation in UploadTokensApi.
 * @export
 * @interface UploadTokensApiDeleteTokenRequest
 */
export type UploadTokensApiDeleteTokenRequest = {
    
    /**
    * The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.
    * @type {string}
    * @memberof UploadTokensApiDeleteToken
    */
    readonly uploadToken: string
    
}

/**
 * Request parameters for generateToken operation in UploadTokensApi.
 * @export
 * @interface UploadTokensApiGenerateTokenRequest
 */
export type UploadTokensApiGenerateTokenRequest = {
    
} & TokenCreationPayload

/**
 * Request parameters for getDetails operation in UploadTokensApi.
 * @export
 * @interface UploadTokensApiGetDetailsRequest
 */
export type UploadTokensApiGetDetailsRequest = {
    
    /**
    * The unique identifier for the token you want information about.
    * @type {string}
    * @memberof UploadTokensApiGetDetails
    */
    readonly uploadToken: string
    
}

/**
 * Request parameters for listActiveDelegatedTokens operation in UploadTokensApi.
 * @export
 * @interface UploadTokensApiListActiveDelegatedTokensRequest
 */
export type UploadTokensApiListActiveDelegatedTokensRequest = {
    
    /**
    * Allowed: createdAt, ttl. You can use these to sort by when a token was created, or how much longer the token will be active (ttl - time to live). Date and time is presented in ISO-8601 format.
    * @type {'createdAt' | 'ttl'}
    * @memberof UploadTokensApiListActiveDelegatedTokens
    */
    readonly sortBy?: 'createdAt' | 'ttl'
    
    /**
    * Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0 or Z-A.
    * @type {'asc' | 'desc'}
    * @memberof UploadTokensApiListActiveDelegatedTokens
    */
    readonly sortOrder?: 'asc' | 'desc'
    
    /**
    * Choose the number of search results to return per page. Minimum value: 1
    * @type {number}
    * @memberof UploadTokensApiListActiveDelegatedTokens
    */
    readonly currentPage?: number
    
    /**
    * Results per page. Allowed values 1-100, default is 25.
    * @type {number}
    * @memberof UploadTokensApiListActiveDelegatedTokens
    */
    readonly pageSize?: number
    
}

/**
 * UploadTokensApiGenerated - object-oriented interface
 * @export
 * @class UploadTokensApiGenerated
 * @extends {BaseAPI}
 */
export class UploadTokensApiGenerated extends BaseAPI {
    /**
     * Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
     * @summary Delete an upload token
     * @param {UploadTokensApiDeleteTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadTokensApiGenerated
     */
    public deleteToken(requestParameters: UploadTokensApiDeleteTokenRequest, options?: AxiosRequestConfig) {
        return UploadTokensApiFp(this.configuration).deleteToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates an upload token that can be used to replace the API Key. More information can be found [here](https://docs.api.video/vod/delegated-upload-tokens)
     * @summary Generate an upload token
     * @param {UploadTokensApiGenerateTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadTokensApiGenerated
     */
    public generateToken(requestParameters: UploadTokensApiGenerateTokenRequest, options?: AxiosRequestConfig) {
        return UploadTokensApiFp(this.configuration).generateToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details about a specific upload token by id.
     * @summary Retrieve upload token
     * @param {UploadTokensApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadTokensApiGenerated
     */
    public getDetails(requestParameters: UploadTokensApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return UploadTokensApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all currently active delegated tokens.
     * @summary List all active upload tokens
     * @param {UploadTokensApiListActiveDelegatedTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadTokensApiGenerated
     */
    public listActiveDelegatedTokens(requestParameters: UploadTokensApiListActiveDelegatedTokensRequest = {}, options?: AxiosRequestConfig) {
        return UploadTokensApiFp(this.configuration).listActiveDelegatedTokens(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
