/* tslint:disable */
/* eslint-disable */
/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { Watermark } from '../models';
// @ts-ignore
import { WatermarkUploadPayload } from '../models';
// @ts-ignore
import { WatermarksListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WatermarksApi - axios parameter creator
 * @export
 */
export const WatermarksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all watermarks associated with your workspace.
         * @summary List all watermarks
         * @param {string} [sortBy] Allowed: createdAt. You can search by the time watermark were created at.
         * @param {string} [sortOrder] Allowed: asc, desc. asc is ascending and sorts from A to Z. desc is descending and sorts from Z to A.
         * @param {number} [currentPage] Choose the number of search results to return per page. Minimum value: 1
         * @param {number} [pageSize] Results per page. Allowed values 1-100, default is 25.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (sortBy?: string, sortOrder?: string, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/watermarks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['currentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/watermarks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new watermark by uploading a `JPG` or a `PNG` image.
         * @summary Upload a watermark
         * @param {Uint8Array | File | buffer.File} file The &#x60;.jpg&#x60; or &#x60;.png&#x60; image to be added as a watermark.
         * @param {WatermarkUploadPayload} watermarkUploadPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watermark: async (file: Uint8Array | File | buffer.File, watermarkUploadPayload: WatermarkUploadPayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('watermark', 'file', file)
            // verify required parameter 'watermarkUploadPayload' is not null or undefined
            assertParamExists('watermark', 'watermarkUploadPayload', watermarkUploadPayload)
            const localVarPath = `/watermarks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: watermarkUploadPayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/watermarks',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a watermark.
         * @summary Delete a watermark
         * @param {string} watermarkId The watermark ID for the watermark you want to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watermark_1: async (watermarkId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'watermarkId' is not null or undefined
            assertParamExists('watermark_1', 'watermarkId', watermarkId)
            const localVarPath = `/watermarks/{watermarkId}`
                .replace(`{${"watermarkId"}}`, encodeURIComponent(String(watermarkId !== undefined ? watermarkId : `-watermarkId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/watermarks/{watermarkId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WatermarksApi - functional programming interface
 * @export
 */
export const WatermarksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WatermarksApiAxiosParamCreator(configuration)
    return {
        /**
         * List all watermarks associated with your workspace.
         * @summary List all watermarks
         * @param {WatermarksApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: WatermarksApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WatermarksListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.sortBy, requestParameters.sortOrder, requestParameters.currentPage, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new watermark by uploading a `JPG` or a `PNG` image.
         * @summary Upload a watermark
         * @param {WatermarksApiWatermarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watermark(requestParameters: WatermarksApiWatermarkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Watermark>> {
            const watermarkUploadPayload: WatermarkUploadPayload = {
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.watermark(requestParameters.file, watermarkUploadPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a watermark.
         * @summary Delete a watermark
         * @param {WatermarksApiWatermark0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watermark_1(requestParameters: WatermarksApiWatermark0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watermark_1(requestParameters.watermarkId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WatermarksApi - factory interface
 * @export
 */
export const WatermarksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WatermarksApiFp(configuration)
    return {
        /**
         * List all watermarks associated with your workspace.
         * @summary List all watermarks
         * @param {WatermarksApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: WatermarksApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WatermarksListResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new watermark by uploading a `JPG` or a `PNG` image.
         * @summary Upload a watermark
         * @param {WatermarksApiWatermarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watermark(requestParameters: WatermarksApiWatermarkRequest, options?: AxiosRequestConfig): AxiosPromise<Watermark> {
            return localVarFp.watermark(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a watermark.
         * @summary Delete a watermark
         * @param {WatermarksApiWatermark0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watermark_1(requestParameters: WatermarksApiWatermark0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.watermark_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listAll operation in WatermarksApi.
 * @export
 * @interface WatermarksApiListAllRequest
 */
export type WatermarksApiListAllRequest = {
    
    /**
    * Allowed: createdAt. You can search by the time watermark were created at.
    * @type {string}
    * @memberof WatermarksApiListAll
    */
    readonly sortBy?: string
    
    /**
    * Allowed: asc, desc. asc is ascending and sorts from A to Z. desc is descending and sorts from Z to A.
    * @type {string}
    * @memberof WatermarksApiListAll
    */
    readonly sortOrder?: string
    
    /**
    * Choose the number of search results to return per page. Minimum value: 1
    * @type {number}
    * @memberof WatermarksApiListAll
    */
    readonly currentPage?: number
    
    /**
    * Results per page. Allowed values 1-100, default is 25.
    * @type {number}
    * @memberof WatermarksApiListAll
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for watermark operation in WatermarksApi.
 * @export
 * @interface WatermarksApiWatermarkRequest
 */
export type WatermarksApiWatermarkRequest = {
    
    /**
    * The `.jpg` or `.png` image to be added as a watermark.
    * @type {Uint8Array | File | buffer.File}
    * @memberof WatermarksApiWatermark
    */
    readonly file: Uint8Array | File | buffer.File
    
} & WatermarkUploadPayload

/**
 * Request parameters for watermark_1 operation in WatermarksApi.
 * @export
 * @interface WatermarksApiWatermark0Request
 */
export type WatermarksApiWatermark0Request = {
    
    /**
    * The watermark ID for the watermark you want to delete.
    * @type {string}
    * @memberof WatermarksApiWatermark0
    */
    readonly watermarkId: string
    
}

/**
 * WatermarksApiGenerated - object-oriented interface
 * @export
 * @class WatermarksApiGenerated
 * @extends {BaseAPI}
 */
export class WatermarksApiGenerated extends BaseAPI {
    /**
     * List all watermarks associated with your workspace.
     * @summary List all watermarks
     * @param {WatermarksApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatermarksApiGenerated
     */
    public listAll(requestParameters: WatermarksApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return WatermarksApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new watermark by uploading a `JPG` or a `PNG` image.
     * @summary Upload a watermark
     * @param {WatermarksApiWatermarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatermarksApiGenerated
     */
    public watermark(requestParameters: WatermarksApiWatermarkRequest, options?: AxiosRequestConfig) {
        return WatermarksApiFp(this.configuration).watermark(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a watermark.
     * @summary Delete a watermark
     * @param {WatermarksApiWatermark0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatermarksApiGenerated
     */
    public watermark_1(requestParameters: WatermarksApiWatermark0Request, options?: AxiosRequestConfig) {
        return WatermarksApiFp(this.configuration).watermark_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
