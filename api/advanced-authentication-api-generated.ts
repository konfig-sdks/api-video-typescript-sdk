/* tslint:disable */
/* eslint-disable */
/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccessToken } from '../models';
// @ts-ignore
import { AuthenticatePayload } from '../models';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { RefreshTokenPayload } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdvancedAuthenticationApi - axios parameter creator
 * @export
 */
export const AdvancedAuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a bearer token that can be used to authenticate other endpoint.  You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
         * @summary Get Bearer Token
         * @param {AuthenticatePayload} authenticatePayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBearerToken: async (authenticatePayload: AuthenticatePayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticatePayload' is not null or undefined
            assertParamExists('getBearerToken', 'authenticatePayload', authenticatePayload)
            const localVarPath = `/auth/api-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authenticatePayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/api-key',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authenticatePayload, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts the old bearer token and returns a new bearer token that can be used to authenticate other endpoint.  You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
         * @summary Refresh Bearer Token
         * @param {RefreshTokenPayload} refreshTokenPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshBearerToken: async (refreshTokenPayload: RefreshTokenPayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenPayload' is not null or undefined
            assertParamExists('refreshBearerToken', 'refreshTokenPayload', refreshTokenPayload)
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: refreshTokenPayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/refresh',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenPayload, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdvancedAuthenticationApi - functional programming interface
 * @export
 */
export const AdvancedAuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdvancedAuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a bearer token that can be used to authenticate other endpoint.  You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
         * @summary Get Bearer Token
         * @param {AdvancedAuthenticationApiGetBearerTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBearerToken(requestParameters: AdvancedAuthenticationApiGetBearerTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToken>> {
            const authenticatePayload: AuthenticatePayload = {
                apiKey: requestParameters.apiKey
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBearerToken(authenticatePayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts the old bearer token and returns a new bearer token that can be used to authenticate other endpoint.  You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
         * @summary Refresh Bearer Token
         * @param {AdvancedAuthenticationApiRefreshBearerTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshBearerToken(requestParameters: AdvancedAuthenticationApiRefreshBearerTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToken>> {
            const refreshTokenPayload: RefreshTokenPayload = {
                refreshToken: requestParameters.refreshToken
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshBearerToken(refreshTokenPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdvancedAuthenticationApi - factory interface
 * @export
 */
export const AdvancedAuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdvancedAuthenticationApiFp(configuration)
    return {
        /**
         * Returns a bearer token that can be used to authenticate other endpoint.  You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
         * @summary Get Bearer Token
         * @param {AdvancedAuthenticationApiGetBearerTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBearerToken(requestParameters: AdvancedAuthenticationApiGetBearerTokenRequest, options?: AxiosRequestConfig): AxiosPromise<AccessToken> {
            return localVarFp.getBearerToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts the old bearer token and returns a new bearer token that can be used to authenticate other endpoint.  You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
         * @summary Refresh Bearer Token
         * @param {AdvancedAuthenticationApiRefreshBearerTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshBearerToken(requestParameters: AdvancedAuthenticationApiRefreshBearerTokenRequest, options?: AxiosRequestConfig): AxiosPromise<AccessToken> {
            return localVarFp.refreshBearerToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBearerToken operation in AdvancedAuthenticationApi.
 * @export
 * @interface AdvancedAuthenticationApiGetBearerTokenRequest
 */
export type AdvancedAuthenticationApiGetBearerTokenRequest = {
    
} & AuthenticatePayload

/**
 * Request parameters for refreshBearerToken operation in AdvancedAuthenticationApi.
 * @export
 * @interface AdvancedAuthenticationApiRefreshBearerTokenRequest
 */
export type AdvancedAuthenticationApiRefreshBearerTokenRequest = {
    
} & RefreshTokenPayload

/**
 * AdvancedAuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AdvancedAuthenticationApiGenerated
 * @extends {BaseAPI}
 */
export class AdvancedAuthenticationApiGenerated extends BaseAPI {
    /**
     * Returns a bearer token that can be used to authenticate other endpoint.  You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
     * @summary Get Bearer Token
     * @param {AdvancedAuthenticationApiGetBearerTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedAuthenticationApiGenerated
     */
    public getBearerToken(requestParameters: AdvancedAuthenticationApiGetBearerTokenRequest, options?: AxiosRequestConfig) {
        return AdvancedAuthenticationApiFp(this.configuration).getBearerToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts the old bearer token and returns a new bearer token that can be used to authenticate other endpoint.  You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
     * @summary Refresh Bearer Token
     * @param {AdvancedAuthenticationApiRefreshBearerTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedAuthenticationApiGenerated
     */
    public refreshBearerToken(requestParameters: AdvancedAuthenticationApiRefreshBearerTokenRequest, options?: AxiosRequestConfig) {
        return AdvancedAuthenticationApiFp(this.configuration).refreshBearerToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
