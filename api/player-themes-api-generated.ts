/* tslint:disable */
/* eslint-disable */
/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { PlayerTheme } from '../models';
// @ts-ignore
import { PlayerThemeCreationPayload } from '../models';
// @ts-ignore
import { PlayerThemeUpdatePayload } from '../models';
// @ts-ignore
import { PlayerThemeUploadLogoPayload } from '../models';
// @ts-ignore
import { PlayerThemesListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PlayerThemesApi - axios parameter creator
 * @export
 */
export const PlayerThemesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a player if you no longer need it. You can delete any player that you have the player ID for.
         * @summary Delete a player
         * @param {string} playerId The unique identifier for the player you want to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayer: async (playerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('deletePlayer', 'playerId', playerId)
            const localVarPath = `/players/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId !== undefined ? playerId : `-playerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/players/{playerId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retreive a player theme by player id.
         * @summary Retrieve a player
         * @param {string} playerId The unique identifier for the player you want to retrieve. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeByPlayerId: async (playerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('getThemeByPlayerId', 'playerId', playerId)
            const localVarPath = `/players/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId !== undefined ? playerId : `-playerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/players/{playerId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all the player themes you created, as well as details about each one.
         * @summary List all player themes
         * @param {'name' | 'createdAt' | 'updatedAt'} [sortBy] createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format.
         * @param {'asc' | 'desc'} [sortOrder] Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones.
         * @param {number} [currentPage] Choose the number of search results to return per page. Minimum value: 1
         * @param {number} [pageSize] Results per page. Allowed values 1-100, default is 25.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        players: async (sortBy?: 'name' | 'createdAt' | 'updatedAt', sortOrder?: 'asc' | 'desc', currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['currentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/players',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a player for your video, and customise it.
         * @summary Create a player
         * @param {PlayerThemeCreationPayload} playerThemeCreationPayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        players_1: async (playerThemeCreationPayload: PlayerThemeCreationPayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerThemeCreationPayload' is not null or undefined
            assertParamExists('players_1', 'playerThemeCreationPayload', playerThemeCreationPayload)
            const localVarPath = `/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: playerThemeCreationPayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/players',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(playerThemeCreationPayload, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the logo associated to a player.
         * @summary Delete logo
         * @param {string} playerId The unique identifier for the player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLogo: async (playerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('removeLogo', 'playerId', playerId)
            const localVarPath = `/players/{playerId}/logo`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId !== undefined ? playerId : `-playerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/players/{playerId}/logo',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use a player ID to update specific details for a player.  NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
         * @summary Update a player
         * @param {string} playerId The unique identifier for the player.
         * @param {PlayerThemeUpdatePayload} playerThemeUpdatePayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayerDetails: async (playerId: string, playerThemeUpdatePayload: PlayerThemeUpdatePayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('updatePlayerDetails', 'playerId', playerId)
            // verify required parameter 'playerThemeUpdatePayload' is not null or undefined
            assertParamExists('updatePlayerDetails', 'playerThemeUpdatePayload', playerThemeUpdatePayload)
            const localVarPath = `/players/{playerId}`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId !== undefined ? playerId : `-playerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: playerThemeUpdatePayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/players/{playerId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(playerThemeUpdatePayload, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload an image file as a logo for your player. The image should fit within these constraints: - The image mime type must be `image/jpeg` or `image/png`. api.video recommends using `png` images with transparent background. - The image size should be a maximum of 200px width x 100px. - The file size should be a maximum of 100 KiB. 
         * @summary Upload a logo
         * @param {string} playerId The unique identifier for the player.
         * @param {Uint8Array | File | buffer.File} file The name of the file you want to use for your logo.
         * @param {PlayerThemeUploadLogoPayload} playerThemeUploadLogoPayload 
         * @param {string} [link] A public link that you want to advertise in your player. For example, you could add a link to your company. When a viewer clicks on your logo, they will be taken to this address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadLogo: async (playerId: string, file: Uint8Array | File | buffer.File, playerThemeUploadLogoPayload: PlayerThemeUploadLogoPayload, link?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('uploadLogo', 'playerId', playerId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadLogo', 'file', file)
            // verify required parameter 'playerThemeUploadLogoPayload' is not null or undefined
            assertParamExists('uploadLogo', 'playerThemeUploadLogoPayload', playerThemeUploadLogoPayload)
            const localVarPath = `/players/{playerId}/logo`
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId !== undefined ? playerId : `-playerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication apiKey required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
            if (link !== undefined) {
                await addFormParam('link', link, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: playerThemeUploadLogoPayload,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/players/{playerId}/logo',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayerThemesApi - functional programming interface
 * @export
 */
export const PlayerThemesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayerThemesApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a player if you no longer need it. You can delete any player that you have the player ID for.
         * @summary Delete a player
         * @param {PlayerThemesApiDeletePlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlayer(requestParameters: PlayerThemesApiDeletePlayerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlayer(requestParameters.playerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retreive a player theme by player id.
         * @summary Retrieve a player
         * @param {PlayerThemesApiGetThemeByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThemeByPlayerId(requestParameters: PlayerThemesApiGetThemeByPlayerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerTheme>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThemeByPlayerId(requestParameters.playerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of all the player themes you created, as well as details about each one.
         * @summary List all player themes
         * @param {PlayerThemesApiPlayersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async players(requestParameters: PlayerThemesApiPlayersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerThemesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.players(requestParameters.sortBy, requestParameters.sortOrder, requestParameters.currentPage, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a player for your video, and customise it.
         * @summary Create a player
         * @param {PlayerThemesApiPlayers0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async players_1(requestParameters: PlayerThemesApiPlayers0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerTheme>> {
            const playerThemeCreationPayload: PlayerThemeCreationPayload = {
                name: requestParameters.name,
                text: requestParameters.text,
                link: requestParameters.link,
                linkHover: requestParameters.linkHover,
                linkActive: requestParameters.linkActive,
                trackPlayed: requestParameters.trackPlayed,
                trackUnplayed: requestParameters.trackUnplayed,
                trackBackground: requestParameters.trackBackground,
                backgroundTop: requestParameters.backgroundTop,
                backgroundBottom: requestParameters.backgroundBottom,
                backgroundText: requestParameters.backgroundText,
                enableApi: requestParameters.enableApi,
                enableControls: requestParameters.enableControls,
                forceAutoplay: requestParameters.forceAutoplay,
                hideTitle: requestParameters.hideTitle,
                forceLoop: requestParameters.forceLoop
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.players_1(playerThemeCreationPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete the logo associated to a player.
         * @summary Delete logo
         * @param {PlayerThemesApiRemoveLogoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeLogo(requestParameters: PlayerThemesApiRemoveLogoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeLogo(requestParameters.playerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use a player ID to update specific details for a player.  NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
         * @summary Update a player
         * @param {PlayerThemesApiUpdatePlayerDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlayerDetails(requestParameters: PlayerThemesApiUpdatePlayerDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerTheme>> {
            const playerThemeUpdatePayload: PlayerThemeUpdatePayload = {
                name: requestParameters.name,
                text: requestParameters.text,
                link: requestParameters.link,
                linkHover: requestParameters.linkHover,
                linkActive: requestParameters.linkActive,
                trackPlayed: requestParameters.trackPlayed,
                trackUnplayed: requestParameters.trackUnplayed,
                trackBackground: requestParameters.trackBackground,
                backgroundTop: requestParameters.backgroundTop,
                backgroundBottom: requestParameters.backgroundBottom,
                backgroundText: requestParameters.backgroundText,
                enableApi: requestParameters.enableApi,
                enableControls: requestParameters.enableControls,
                forceAutoplay: requestParameters.forceAutoplay,
                hideTitle: requestParameters.hideTitle,
                forceLoop: requestParameters.forceLoop
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlayerDetails(requestParameters.playerId, playerThemeUpdatePayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload an image file as a logo for your player. The image should fit within these constraints: - The image mime type must be `image/jpeg` or `image/png`. api.video recommends using `png` images with transparent background. - The image size should be a maximum of 200px width x 100px. - The file size should be a maximum of 100 KiB. 
         * @summary Upload a logo
         * @param {PlayerThemesApiUploadLogoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadLogo(requestParameters: PlayerThemesApiUploadLogoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerTheme>> {
            const playerThemeUploadLogoPayload: PlayerThemeUploadLogoPayload = {
                file: requestParameters.file,
                link: requestParameters.link
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadLogo(requestParameters.playerId, requestParameters.file, playerThemeUploadLogoPayload, requestParameters.link, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlayerThemesApi - factory interface
 * @export
 */
export const PlayerThemesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayerThemesApiFp(configuration)
    return {
        /**
         * Delete a player if you no longer need it. You can delete any player that you have the player ID for.
         * @summary Delete a player
         * @param {PlayerThemesApiDeletePlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayer(requestParameters: PlayerThemesApiDeletePlayerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePlayer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retreive a player theme by player id.
         * @summary Retrieve a player
         * @param {PlayerThemesApiGetThemeByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThemeByPlayerId(requestParameters: PlayerThemesApiGetThemeByPlayerIdRequest, options?: AxiosRequestConfig): AxiosPromise<PlayerTheme> {
            return localVarFp.getThemeByPlayerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all the player themes you created, as well as details about each one.
         * @summary List all player themes
         * @param {PlayerThemesApiPlayersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        players(requestParameters: PlayerThemesApiPlayersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PlayerThemesListResponse> {
            return localVarFp.players(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a player for your video, and customise it.
         * @summary Create a player
         * @param {PlayerThemesApiPlayers0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        players_1(requestParameters: PlayerThemesApiPlayers0Request, options?: AxiosRequestConfig): AxiosPromise<PlayerTheme> {
            return localVarFp.players_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the logo associated to a player.
         * @summary Delete logo
         * @param {PlayerThemesApiRemoveLogoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLogo(requestParameters: PlayerThemesApiRemoveLogoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeLogo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use a player ID to update specific details for a player.  NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
         * @summary Update a player
         * @param {PlayerThemesApiUpdatePlayerDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayerDetails(requestParameters: PlayerThemesApiUpdatePlayerDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<PlayerTheme> {
            return localVarFp.updatePlayerDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload an image file as a logo for your player. The image should fit within these constraints: - The image mime type must be `image/jpeg` or `image/png`. api.video recommends using `png` images with transparent background. - The image size should be a maximum of 200px width x 100px. - The file size should be a maximum of 100 KiB. 
         * @summary Upload a logo
         * @param {PlayerThemesApiUploadLogoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadLogo(requestParameters: PlayerThemesApiUploadLogoRequest, options?: AxiosRequestConfig): AxiosPromise<PlayerTheme> {
            return localVarFp.uploadLogo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePlayer operation in PlayerThemesApi.
 * @export
 * @interface PlayerThemesApiDeletePlayerRequest
 */
export type PlayerThemesApiDeletePlayerRequest = {
    
    /**
    * The unique identifier for the player you want to delete.
    * @type {string}
    * @memberof PlayerThemesApiDeletePlayer
    */
    readonly playerId: string
    
}

/**
 * Request parameters for getThemeByPlayerId operation in PlayerThemesApi.
 * @export
 * @interface PlayerThemesApiGetThemeByPlayerIdRequest
 */
export type PlayerThemesApiGetThemeByPlayerIdRequest = {
    
    /**
    * The unique identifier for the player you want to retrieve. 
    * @type {string}
    * @memberof PlayerThemesApiGetThemeByPlayerId
    */
    readonly playerId: string
    
}

/**
 * Request parameters for players operation in PlayerThemesApi.
 * @export
 * @interface PlayerThemesApiPlayersRequest
 */
export type PlayerThemesApiPlayersRequest = {
    
    /**
    * createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format.
    * @type {'name' | 'createdAt' | 'updatedAt'}
    * @memberof PlayerThemesApiPlayers
    */
    readonly sortBy?: 'name' | 'createdAt' | 'updatedAt'
    
    /**
    * Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones.
    * @type {'asc' | 'desc'}
    * @memberof PlayerThemesApiPlayers
    */
    readonly sortOrder?: 'asc' | 'desc'
    
    /**
    * Choose the number of search results to return per page. Minimum value: 1
    * @type {number}
    * @memberof PlayerThemesApiPlayers
    */
    readonly currentPage?: number
    
    /**
    * Results per page. Allowed values 1-100, default is 25.
    * @type {number}
    * @memberof PlayerThemesApiPlayers
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for players_1 operation in PlayerThemesApi.
 * @export
 * @interface PlayerThemesApiPlayers0Request
 */
export type PlayerThemesApiPlayers0Request = {
    
} & PlayerThemeCreationPayload

/**
 * Request parameters for removeLogo operation in PlayerThemesApi.
 * @export
 * @interface PlayerThemesApiRemoveLogoRequest
 */
export type PlayerThemesApiRemoveLogoRequest = {
    
    /**
    * The unique identifier for the player.
    * @type {string}
    * @memberof PlayerThemesApiRemoveLogo
    */
    readonly playerId: string
    
}

/**
 * Request parameters for updatePlayerDetails operation in PlayerThemesApi.
 * @export
 * @interface PlayerThemesApiUpdatePlayerDetailsRequest
 */
export type PlayerThemesApiUpdatePlayerDetailsRequest = {
    
    /**
    * The unique identifier for the player.
    * @type {string}
    * @memberof PlayerThemesApiUpdatePlayerDetails
    */
    readonly playerId: string
    
} & PlayerThemeUpdatePayload

/**
 * Request parameters for uploadLogo operation in PlayerThemesApi.
 * @export
 * @interface PlayerThemesApiUploadLogoRequest
 */
export type PlayerThemesApiUploadLogoRequest = {
    
    /**
    * The unique identifier for the player.
    * @type {string}
    * @memberof PlayerThemesApiUploadLogo
    */
    readonly playerId: string
    
    /**
    * The name of the file you want to use for your logo.
    * @type {Uint8Array | File | buffer.File}
    * @memberof PlayerThemesApiUploadLogo
    */
    readonly file: Uint8Array | File | buffer.File
    
    /**
    * A public link that you want to advertise in your player. For example, you could add a link to your company. When a viewer clicks on your logo, they will be taken to this address.
    * @type {string}
    * @memberof PlayerThemesApiUploadLogo
    */
    readonly link?: string
    
} & PlayerThemeUploadLogoPayload

/**
 * PlayerThemesApiGenerated - object-oriented interface
 * @export
 * @class PlayerThemesApiGenerated
 * @extends {BaseAPI}
 */
export class PlayerThemesApiGenerated extends BaseAPI {
    /**
     * Delete a player if you no longer need it. You can delete any player that you have the player ID for.
     * @summary Delete a player
     * @param {PlayerThemesApiDeletePlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerThemesApiGenerated
     */
    public deletePlayer(requestParameters: PlayerThemesApiDeletePlayerRequest, options?: AxiosRequestConfig) {
        return PlayerThemesApiFp(this.configuration).deletePlayer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retreive a player theme by player id.
     * @summary Retrieve a player
     * @param {PlayerThemesApiGetThemeByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerThemesApiGenerated
     */
    public getThemeByPlayerId(requestParameters: PlayerThemesApiGetThemeByPlayerIdRequest, options?: AxiosRequestConfig) {
        return PlayerThemesApiFp(this.configuration).getThemeByPlayerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all the player themes you created, as well as details about each one.
     * @summary List all player themes
     * @param {PlayerThemesApiPlayersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerThemesApiGenerated
     */
    public players(requestParameters: PlayerThemesApiPlayersRequest = {}, options?: AxiosRequestConfig) {
        return PlayerThemesApiFp(this.configuration).players(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a player for your video, and customise it.
     * @summary Create a player
     * @param {PlayerThemesApiPlayers0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerThemesApiGenerated
     */
    public players_1(requestParameters: PlayerThemesApiPlayers0Request, options?: AxiosRequestConfig) {
        return PlayerThemesApiFp(this.configuration).players_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the logo associated to a player.
     * @summary Delete logo
     * @param {PlayerThemesApiRemoveLogoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerThemesApiGenerated
     */
    public removeLogo(requestParameters: PlayerThemesApiRemoveLogoRequest, options?: AxiosRequestConfig) {
        return PlayerThemesApiFp(this.configuration).removeLogo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use a player ID to update specific details for a player.  NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
     * @summary Update a player
     * @param {PlayerThemesApiUpdatePlayerDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerThemesApiGenerated
     */
    public updatePlayerDetails(requestParameters: PlayerThemesApiUpdatePlayerDetailsRequest, options?: AxiosRequestConfig) {
        return PlayerThemesApiFp(this.configuration).updatePlayerDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload an image file as a logo for your player. The image should fit within these constraints: - The image mime type must be `image/jpeg` or `image/png`. api.video recommends using `png` images with transparent background. - The image size should be a maximum of 200px width x 100px. - The file size should be a maximum of 100 KiB. 
     * @summary Upload a logo
     * @param {PlayerThemesApiUploadLogoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerThemesApiGenerated
     */
    public uploadLogo(requestParameters: PlayerThemesApiUploadLogoRequest, options?: AxiosRequestConfig) {
        return PlayerThemesApiFp(this.configuration).uploadLogo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
